// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	retry "github.com/wb-go/wbf/retry"
)

// MocknotificationService is a mock of notificationService interface.
type MocknotificationService struct {
	ctrl     *gomock.Controller
	recorder *MocknotificationServiceMockRecorder
}

// MocknotificationServiceMockRecorder is the mock recorder for MocknotificationService.
type MocknotificationServiceMockRecorder struct {
	mock *MocknotificationService
}

// NewMocknotificationService creates a new mock instance.
func NewMocknotificationService(ctrl *gomock.Controller) *MocknotificationService {
	mock := &MocknotificationService{ctrl: ctrl}
	mock.recorder = &MocknotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknotificationService) EXPECT() *MocknotificationServiceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MocknotificationService) Send(to, message, channel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", to, message, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MocknotificationServiceMockRecorder) Send(to, message, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MocknotificationService)(nil).Send), to, message, channel)
}

// SetStatus mocks base method.
func (m *MocknotificationService) SetStatus(ctx context.Context, strategy retry.Strategy, id uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, strategy, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MocknotificationServiceMockRecorder) SetStatus(ctx, strategy, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MocknotificationService)(nil).SetStatus), ctx, strategy, id, status)
}
