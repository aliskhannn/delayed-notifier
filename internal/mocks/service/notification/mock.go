// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/aliskhannn/delayed-notifier/internal/model"
	queue "github.com/aliskhannn/delayed-notifier/internal/rabbitmq/queue"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	retry "github.com/wb-go/wbf/retry"
)

// MocknotificationPublisher is a mock of notificationPublisher interface.
type MocknotificationPublisher struct {
	ctrl     *gomock.Controller
	recorder *MocknotificationPublisherMockRecorder
}

// MocknotificationPublisherMockRecorder is the mock recorder for MocknotificationPublisher.
type MocknotificationPublisherMockRecorder struct {
	mock *MocknotificationPublisher
}

// NewMocknotificationPublisher creates a new mock instance.
func NewMocknotificationPublisher(ctrl *gomock.Controller) *MocknotificationPublisher {
	mock := &MocknotificationPublisher{ctrl: ctrl}
	mock.recorder = &MocknotificationPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknotificationPublisher) EXPECT() *MocknotificationPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MocknotificationPublisher) Publish(msg queue.NotificationMessage, strategy retry.Strategy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", msg, strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MocknotificationPublisherMockRecorder) Publish(msg, strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MocknotificationPublisher)(nil).Publish), msg, strategy)
}

// MocknotificationRepository is a mock of notificationRepository interface.
type MocknotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MocknotificationRepositoryMockRecorder
}

// MocknotificationRepositoryMockRecorder is the mock recorder for MocknotificationRepository.
type MocknotificationRepositoryMockRecorder struct {
	mock *MocknotificationRepository
}

// NewMocknotificationRepository creates a new mock instance.
func NewMocknotificationRepository(ctrl *gomock.Controller) *MocknotificationRepository {
	mock := &MocknotificationRepository{ctrl: ctrl}
	mock.recorder = &MocknotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknotificationRepository) EXPECT() *MocknotificationRepositoryMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MocknotificationRepository) CreateNotification(arg0 context.Context, arg1 model.Notification) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MocknotificationRepositoryMockRecorder) CreateNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MocknotificationRepository)(nil).CreateNotification), arg0, arg1)
}

// GetAllNotifications mocks base method.
func (m *MocknotificationRepository) GetAllNotifications(arg0 context.Context) ([]model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotifications", arg0)
	ret0, _ := ret[0].([]model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotifications indicates an expected call of GetAllNotifications.
func (mr *MocknotificationRepositoryMockRecorder) GetAllNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotifications", reflect.TypeOf((*MocknotificationRepository)(nil).GetAllNotifications), arg0)
}

// GetNotificationStatusByID mocks base method.
func (m *MocknotificationRepository) GetNotificationStatusByID(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationStatusByID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationStatusByID indicates an expected call of GetNotificationStatusByID.
func (mr *MocknotificationRepositoryMockRecorder) GetNotificationStatusByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationStatusByID", reflect.TypeOf((*MocknotificationRepository)(nil).GetNotificationStatusByID), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MocknotificationRepository) UpdateStatus(arg0 context.Context, arg1 uuid.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MocknotificationRepositoryMockRecorder) UpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MocknotificationRepository)(nil).UpdateStatus), arg0, arg1, arg2)
}

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockNotifier) Send(to, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", to, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNotifierMockRecorder) Send(to, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotifier)(nil).Send), to, msg)
}

// Mockcache is a mock of cache interface.
type Mockcache struct {
	ctrl     *gomock.Controller
	recorder *MockcacheMockRecorder
}

// MockcacheMockRecorder is the mock recorder for Mockcache.
type MockcacheMockRecorder struct {
	mock *Mockcache
}

// NewMockcache creates a new mock instance.
func NewMockcache(ctrl *gomock.Controller) *Mockcache {
	mock := &Mockcache{ctrl: ctrl}
	mock.recorder = &MockcacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcache) EXPECT() *MockcacheMockRecorder {
	return m.recorder
}

// GetWithRetry mocks base method.
func (m *Mockcache) GetWithRetry(ctx context.Context, strategy retry.Strategy, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithRetry", ctx, strategy, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithRetry indicates an expected call of GetWithRetry.
func (mr *MockcacheMockRecorder) GetWithRetry(ctx, strategy, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithRetry", reflect.TypeOf((*Mockcache)(nil).GetWithRetry), ctx, strategy, key)
}

// SetWithRetry mocks base method.
func (m *Mockcache) SetWithRetry(ctx context.Context, strategy retry.Strategy, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithRetry", ctx, strategy, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithRetry indicates an expected call of SetWithRetry.
func (mr *MockcacheMockRecorder) SetWithRetry(ctx, strategy, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithRetry", reflect.TypeOf((*Mockcache)(nil).SetWithRetry), ctx, strategy, key, value)
}
