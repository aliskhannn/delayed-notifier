// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/aliskhannn/delayed-notifier/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	retry "github.com/wb-go/wbf/retry"
)

// MocknotifService is a mock of notifService interface.
type MocknotifService struct {
	ctrl     *gomock.Controller
	recorder *MocknotifServiceMockRecorder
}

// MocknotifServiceMockRecorder is the mock recorder for MocknotifService.
type MocknotifServiceMockRecorder struct {
	mock *MocknotifService
}

// NewMocknotifService creates a new mock instance.
func NewMocknotifService(ctrl *gomock.Controller) *MocknotifService {
	mock := &MocknotifService{ctrl: ctrl}
	mock.recorder = &MocknotifServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknotifService) EXPECT() *MocknotifServiceMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MocknotifService) CreateNotification(arg0 context.Context, arg1 retry.Strategy, arg2 model.Notification) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MocknotifServiceMockRecorder) CreateNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MocknotifService)(nil).CreateNotification), arg0, arg1, arg2)
}

// GetAllNotifications mocks base method.
func (m *MocknotifService) GetAllNotifications(arg0 context.Context) ([]model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotifications", arg0)
	ret0, _ := ret[0].([]model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotifications indicates an expected call of GetAllNotifications.
func (mr *MocknotifServiceMockRecorder) GetAllNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotifications", reflect.TypeOf((*MocknotifService)(nil).GetAllNotifications), arg0)
}

// GetNotificationStatusByID mocks base method.
func (m *MocknotifService) GetNotificationStatusByID(arg0 context.Context, arg1 retry.Strategy, arg2 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationStatusByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationStatusByID indicates an expected call of GetNotificationStatusByID.
func (mr *MocknotifServiceMockRecorder) GetNotificationStatusByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationStatusByID", reflect.TypeOf((*MocknotifService)(nil).GetNotificationStatusByID), arg0, arg1, arg2)
}

// SetStatus mocks base method.
func (m *MocknotifService) SetStatus(ctx context.Context, strategy retry.Strategy, id uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, strategy, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MocknotifServiceMockRecorder) SetStatus(ctx, strategy, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MocknotifService)(nil).SetStatus), ctx, strategy, id, status)
}
