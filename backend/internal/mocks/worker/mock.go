// Code generated by MockGen. DO NOT EDIT.
// Source: notifier.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	queue "github.com/aliskhannn/delayed-notifier/internal/rabbitmq/queue"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	retry "github.com/wb-go/wbf/retry"
)

// MocknotificationConsumer is a mock of notificationConsumer interface.
type MocknotificationConsumer struct {
	ctrl     *gomock.Controller
	recorder *MocknotificationConsumerMockRecorder
}

// MocknotificationConsumerMockRecorder is the mock recorder for MocknotificationConsumer.
type MocknotificationConsumerMockRecorder struct {
	mock *MocknotificationConsumer
}

// NewMocknotificationConsumer creates a new mock instance.
func NewMocknotificationConsumer(ctrl *gomock.Controller) *MocknotificationConsumer {
	mock := &MocknotificationConsumer{ctrl: ctrl}
	mock.recorder = &MocknotificationConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknotificationConsumer) EXPECT() *MocknotificationConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MocknotificationConsumer) Consume(ctx context.Context, out chan<- queue.NotificationMessage, strategy retry.Strategy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, out, strategy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MocknotificationConsumerMockRecorder) Consume(ctx, out, strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MocknotificationConsumer)(nil).Consume), ctx, out, strategy)
}

// MockmessageHandler is a mock of messageHandler interface.
type MockmessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockmessageHandlerMockRecorder
}

// MockmessageHandlerMockRecorder is the mock recorder for MockmessageHandler.
type MockmessageHandlerMockRecorder struct {
	mock *MockmessageHandler
}

// NewMockmessageHandler creates a new mock instance.
func NewMockmessageHandler(ctrl *gomock.Controller) *MockmessageHandler {
	mock := &MockmessageHandler{ctrl: ctrl}
	mock.recorder = &MockmessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageHandler) EXPECT() *MockmessageHandlerMockRecorder {
	return m.recorder
}

// HandleMessage mocks base method.
func (m *MockmessageHandler) HandleMessage(ctx context.Context, msg queue.NotificationMessage, strategy retry.Strategy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage", ctx, msg, strategy)
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockmessageHandlerMockRecorder) HandleMessage(ctx, msg, strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockmessageHandler)(nil).HandleMessage), ctx, msg, strategy)
}

// MocknotificationService is a mock of notificationService interface.
type MocknotificationService struct {
	ctrl     *gomock.Controller
	recorder *MocknotificationServiceMockRecorder
}

// MocknotificationServiceMockRecorder is the mock recorder for MocknotificationService.
type MocknotificationServiceMockRecorder struct {
	mock *MocknotificationService
}

// NewMocknotificationService creates a new mock instance.
func NewMocknotificationService(ctrl *gomock.Controller) *MocknotificationService {
	mock := &MocknotificationService{ctrl: ctrl}
	mock.recorder = &MocknotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknotificationService) EXPECT() *MocknotificationServiceMockRecorder {
	return m.recorder
}

// GetNotificationStatusByID mocks base method.
func (m *MocknotificationService) GetNotificationStatusByID(arg0 context.Context, arg1 retry.Strategy, arg2 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationStatusByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationStatusByID indicates an expected call of GetNotificationStatusByID.
func (mr *MocknotificationServiceMockRecorder) GetNotificationStatusByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationStatusByID", reflect.TypeOf((*MocknotificationService)(nil).GetNotificationStatusByID), arg0, arg1, arg2)
}
